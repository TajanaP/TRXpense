@model TRXpense.App.Web.ViewModels.TravelReportVM

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="/">Home</a></li>
    <li class="breadcrumb-item"><a href="/TravelReport">Travel Reports</a></li>
    <li class="breadcrumb-item active">Edit Travel Report</li>
</ol>

<h2>Edit Travel Report</h2>
<hr />

@if (TempData["expenseCreatedOrUpdatedMessage"] != null || TempData["expenseDeletedMessage"] != null || TempData["travelReportUpdatedMessage"] != null)
{
    <div class="successMessage">
        <span class="glyphicon glyphicon-ok"></span>  @ViewBag.Message
    </div>
}
@if (TempData["wrongNumberOfMeals"] != null)
{
    <div class="alertMessage">
        <span class="glyphicon glyphicon-warning-sign"></span>   @ViewBag.AlertMessage
    </div>
}

<ul class="nav nav-tabs">
    <li role="presentation" class="active"><a href="#report" aria-controls="report" role="tab" data-toggle="tab">Report</a></li>
    <li role="presentation"><a href="#expenses" aria-controls="expenses" role="tab" data-toggle="tab">Expenses</a></li>
</ul>

<div class="tab-content">

    @*PANEL REPORT*@

    <div role="tabpanel" class="tab-pane active" id="report">
        <br />
        @using (Html.BeginForm("Edit", "TravelReport", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary("", new { @class = "alert alert-danger" })

            <div>
                <div class="form-group">
                    @Html.LabelFor(m => m.EmployeeId, new { @class = "col-md-2 control-label" })
                    @Html.EditorFor(m => m.EmployeeId, new { htmlAttributes = new { @class = "col-md-4 form-control", disabled = "disabled", @Value = ViewBag.User } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Departure, new { @class = "col-md-2 control-label" })
                    <div class="form-group input-group date" id="datetimepickerDeparture">
                        @Html.EditorFor(m => m.Departure, new { htmlAttributes = new { Value = Model.Departure.ToString(), @class = "form-control", placeholder = "YYYY.MM.DD", onkeydown = "return false", onpaste = "return false" } })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                    @Html.LabelFor(m => m.Return, new { @class = "col-md-2 control-label" })
                    <div class="form-group input-group date" id="datetimepickerReturn">
                        @Html.EditorFor(m => m.Return, new { htmlAttributes = new { Value = Model.Return.ToString(), @class = "form-control", placeholder = "YYYY.MM.DD", onkeydown = "return false", onpaste = "return false" } })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NumberOfMeals, new { @class = "col-md-2 control-label" })
                    @Html.EnumDropDownListFor(m => m.NumberOfMeals, new { @class = "col-md-4 form-control" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NumberOfHours, new { @class = "col-md-2 control-label" })
                    @Html.EditorFor(m => m.NumberOfHours, new { htmlAttributes = new { @class = "col-md-4 form-control", disabled = "disabled" } })
                    @Html.LabelFor(m => m.NumberOfAllowances, new { @class = "col-md-2 control-label" })
                    @Html.EditorFor(m => m.NumberOfAllowances, new { htmlAttributes = new { @class = "col-md-4 form-control", disabled = "disabled" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ReasonForTravel, new { @class = "col-md-2 control-label" })
                    @Html.EditorFor(m => m.ReasonForTravel, new { htmlAttributes = new { @class = "col-md-4 form-control" } })
                    @Html.LabelFor(m => m.City, new { @class = "col-md-2 control-label" })
                    @Html.EditorFor(m => m.City, new { htmlAttributes = new { @class = "col-md-4 form-control" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.CountryAllowanceId, new { @class = "col-md-2 control-label" })
                    @Html.DropDownListFor(m => m.CountryAllowanceId, (List<SelectListItem>)ViewBag.Countries, new { @class = "col-md-4 form-control", @onchange = "FillAllowanceAmount()", id = "Country" })
                    @Html.LabelFor(m => m.DailyAllowance, new { @class = "col-md-2 control-label" })
                    @Html.EditorFor(m => m.DailyAllowance, new { htmlAttributes = new { @class = "col-md-4 form-control", disabled = "disabled", id = "allowanceAmount", @Value = ViewBag.Allowance } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.VehicleType, new { @class = "col-md-2 control-label" })
                    @Html.EnumDropDownListFor(m => m.VehicleType, "-- Select Vehicle --", new { @class = "col-md-4 form-control", id = "VehicleType" })
                    <div id="hiddenRegistrationDropdown">
                        @Html.LabelFor(m => m.VehicleId, new { @class = "col-md-2 control-label" })
                        @Html.DropDownListFor(m => m.VehicleId, (List<SelectListItem>)ViewBag.Vehicles, new { @class = "col-md-4 form-control", id = "VehicleId" })
                    </div>
                </div>
                <div id="hiddenMileageForm">
                    <div class="form-group">
                        @Html.LabelFor(m => m.StartMileage, new { @class = "col-md-2 control-label" })
                        @Html.EditorFor(m => m.StartMileage, new { htmlAttributes = new { @class = "col-md-4 form-control" } })
                        @Html.LabelFor(m => m.EndMileage, new { @class = "col-md-2 control-label" })
                        @Html.EditorFor(m => m.EndMileage, new { htmlAttributes = new { @class = "col-md-4 form-control" } })
                    </div>
                </div>
                <div class="form-group" id="hiddenDepositForm">
                    <div id="hiddenDepositField">
                        @Html.LabelFor(m => m.Deposit, new { @class = "col-md-2 control-label" })
                        <div id="depositCheckbox" class="col-md-2 form-group">
                            @Html.CheckBoxFor(m => m.Deposit, new { @class = "", id = "Deposit" })
                        </div>
                    </div>
                    <div id="hiddenDepositField">
                        @Html.LabelFor(m => m.DepositAmount, new { @class = "col-md-2 control-label" })
                        @Html.EditorFor(m => m.DepositAmount, new { htmlAttributes = new { @class = "col-md-4 form-control", id = "DepositField" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ExpenseSum, new { @class = "col-md-2 control-label" })
                    @Html.EditorFor(m => m.ExpenseSum, new { htmlAttributes = new { @class = "col-md-4 form-control", disabled = "disabled" } })
                </div>
                <hr />
                <input type="submit" class="btn btn-primary col-md-offset-9" value="Save" />
            </div>
        }
    </div>

    @*PANEL EXPENSES*@

    <div role="tabpanel" class="tab-pane" id="expenses">
        <br />

        <span class="create-button pull-right">@Html.ActionLink(" ", "CreateExpense", "TravelReport", new { travelReportId = Model.Id }, new { @class = "modal-link btn btn-success glyphicon glyphicon-plus" })</span>

        <div class="container">
            <div class="row">
                <div class="col-md-10 col-md-offset-1">
                    <div class="panel panel-default panel-table">
                        <div class="panel-body">
                            <table id="travelOrders" class="table table-hover">
                                <thead>
                                    <tr>
                                        <td><h4>Date</h4></td>
                                        <td><h4>Bill Number</h4></td>
                                        <td><h4>Bill Amount</h4></td>
                                        <td><h4>Currency</h4></td>
                                        <td><h4>Category</h4></td>
                                        @*<td><h4>Account</h4></td>*@
                                        <td></td>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var expense in Model.Expenses)
                                    {
                                        <tr id="row_@expense.Id">
                                            <td>@expense.Date</td>
                                            <td>@expense.BillNumber</td>
                                            <td>@expense.BillAmount</td>
                                            <td>@expense.OfficialCurrency</td>
                                            <td>@expense.ExpenseCategory.Name</td>
                                            @*<td>@expense.ExpenseCategory.Account</td>*@
                                            <td>
                                                <div class="controlButtons">
                                                    @Html.ActionLink(" ", "EditExpense", "TravelReport", new { id = expense.Id }, new { @class = "modal-link btn btn-default glyphicon glyphicon-pencil" })
                                                    <a href="#" class="btn btn-danger" onclick="ConfirmDelete(@expense.Id)"><i class="glyphicon glyphicon-trash"></i> </a>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="panel-footer"></div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="deleteConfirmModal">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <a href="#" class="close" data-dismiss="modal">&times;</a>
                            <h4 class="modal-title">Delete</h4>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete this expense? </p>
                        </div>
                        <div class="modal-footer">
                            <a href="#" class="btn btn-default" data-dismiss="modal">Cancel</a>
                            <a href="#" class="btn btn-danger" onclick="DeleteExpense()">Confirm</a>
                        </div>
                    </div>
                </div>
            </div>

            @*hidden field for storing current itemId*@
            <input type="hidden" id="hiddenId" />
        </div>
    </div>

</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $('#datetimepickerDeparture').datetimepicker({
            format: ''
        }).on('changeDate', function (ev) {
            $(this).datetimepicker('hide');
        });

        $('#datetimepickerReturn').datetimepicker({
            format: ''
        }).on('changeDate', function (ev) {
                $(this).datetimepicker('hide');
        });

        // on change
        // show mileage fields and dropdown with registrations if "Company car" is selected
        // show mileage fields if "Private Car" is selected
        $(function () {
            $('#VehicleType').change(function () {
                var value = $(this).val();
                if (value == '1') {                                                             // COMPANY CAR
                    $('#hiddenRegistrationDropdown').show();
                    $('#VehicleId').prop("required", true);
                    $.validator.messages.required = 'Company Car Registration is required.';
                    $('#hiddenMileageForm').show();
                    $('#StartMileage').prop("required", false);
                    $('#EndMileage').prop("required", false);
                    $('#StartMileage').val(null);
                    $('#EndMileage').val(null);
                } else if (value == '0') {                                                      // PRIVATE CAR
                    $('#hiddenMileageForm').show();
                    $('#StartMileage').prop("required", true);
                    $('#EndMileage').prop("required", true);
                    $('#StartMileage').val(null);
                    $('#EndMileage').val(null);
                    $.validator.messages.required = 'Mileage field is required.';
                    $('#hiddenRegistrationDropdown').hide();
                    $('#VehicleId').prop("required", false);
                    $('#VehicleId').val(null);
                } else {                                                                        // OTHER
                    $('#hiddenRegistrationDropdown').hide();
                    $('#VehicleId').prop("required", false);
                    $('#VehicleId').val(null);
                    $('#hiddenMileageForm').hide();
                    $('#StartMileage').prop("required", false);
                    $('#EndMileage').prop("required", false);
                    $('#StartMileage').val(null);
                    $('#EndMileage').val(null);
                }
            });
        });

        // default
        // show mileage fields and dropdown with registrations if "Company car" is selected
        // show mileage fields if "Private Car" is selected
        var value = $('#VehicleType').val();
        if (value == '1') {                                                             // COMPANY CAR
            $('#hiddenRegistrationDropdown').show();
            $('#VehicleId').prop("required", true);
            $.validator.messages.required = 'Company Car Registration is required.';
            $('#hiddenMileageForm').show();
            $('#StartMileage').prop("required", false);
            $('#EndMileage').prop("required", false);
        } else if (value == '0') {                                                      // PRIVATE CAR
            $('#hiddenMileageForm').show();
            $('#StartMileage').prop("required", true);
            $('#EndMileage').prop("required", true);
            $.validator.messages.required = 'Mileage field is required.';
            $('#hiddenRegistrationDropdown').hide();
            $('#VehicleId').prop("required", false);
            $('#VehicleId').val(null);
        } else {                                                                        // OTHER
            $('#hiddenRegistrationDropdown').hide();
            $('#VehicleId').prop("required", false);
            $('#VehicleId').val(null);
            $('#hiddenMileageForm').hide();
            $('#StartMileage').prop("required", false);
            $('#EndMileage').prop("required", false);
            $('#StartMileage').val(null);
            $('#EndMileage').val(null);
        }

        // fill allowance (amount & currency) based on selected country
        function FillAllowanceAmount() {
            var CountryId = $('#Country').val();
            $.ajax({
                url: '@Url.Action("GetAllowanceForCountry")',
                dataType: "JSON",
                data: { countryId: CountryId },
                success: function (result) {
                    $('#allowanceAmount').val(result);
                }
            });
        }

        // EXPENSE

        var ConfirmDelete = function (id) {
            $("#hiddenId").val(id);
            $("#deleteConfirmModal").modal('show');
        }

        var DeleteExpense = function () {
            var exId = $("#hiddenId").val();
            $.ajax({
                type: "POST",
                url: '@Url.Action("DeleteExpense")',
                data: { id: exId },
                success: function (result) {
                    // when trying to delete allowance or private car transportation expense
                    if (result != true) {
                        bootbox.dialog({
                            message: "You can not delete this expense!"
                                + "</br>"
                                + "Please change data in report to change/delete this expense.",
                            title: "<span style='color:#e20a0a;' class='glyphicon glyphicon-warning-sign'></span>"
                                + "<span style='color:#e20a0a;'><strong> Warning </strong></span> ",
                            buttons: {
                                success: {
                                    label: "Close",
                                    className: "btn-default",
                                },
                            }
                        });
                        $("#deleteConfirmModal").modal("hide");
                    }
                        // other expenses
                    else {
                        $("#deleteConfirmModal").modal("hide");
                        $("#row_" + exId).remove();
                        window.location.reload();
                    }
                }
            })
        }
    </script>
}